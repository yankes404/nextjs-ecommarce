// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole        @default(USER)
  twoFAEnabled        Boolean         @default(false)
  twoFACode           TwoFACode?
  accounts            Account[]
  feedbacks           Feedback[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Product {
  id          String    @id @default(cuid())
  stripeId    String    @unique
  name        String
  description String
  price       Float
  images      String[]  @default([])
  orders      Order[]
  feedbacks   Feedback[]
}

enum OrderStatus {
  DELIVERED
  PENDING
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  customerEmail String
  products      Product[]
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ResetPasswordToken {
  userId    String    @id
  token     String    @unique @default(cuid())
  expiresAt DateTime
}

model EmailVerificationToken {
  email           String    @id
  token           String    @unique @default(cuid())
  expiresAt       DateTime
  requestedEmail  String?
}

model TwoFACode {
  userId    String    @id
  code      String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId])
}

model Feedback {
  id        String  @id @default(cuid())
  stars     Int
  content   String
  isEdited  Boolean @default(false)
  isHidden  Boolean @default(false)
  userId    String
  productId String

  user    User    @relation(references: [id], fields: [userId])
  product Product @relation(references: [id], fields: [productId])

  createdAt DateTime @default(now())
}